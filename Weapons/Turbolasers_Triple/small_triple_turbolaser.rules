Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/TripleTurbolaser"
	IconNameKey = "Parts/TripleTurbolaserIcon"
	ID = SW.small_triple_turbolaser
	OtherIDs = ["small_triple_turbolaser","SW.small_triple_turbolaser_test"]
	EditorGroup = "WeaponsEnergy"
	DescriptionKey = "Parts/TripleTurbolaserDesc"
	Resources
	[
		[steel, 8] //
	]  //Cost = 10000
	Size = [3, 3]
	SelectionPriority = 1
	MaxHealth = 5200
	TypeCategories = [weapon, uses_power, is_crewed]//, uses_laser_parts
	SelectionTypeByRotation = true
	SelectionTypeID = "turbolasers"
	MaxDoors = 3
	ReceivableBuffs : ^/0/ReceivableBuffs []
	/*
	ProhibitedBy : ^/0/ProhibitedBy [tall]
	ProhibitRects
	[
		[tall, [0, -1, 3, 1]]
	]
	*/
	AllowedDoorLocations
	[
		[-1, 1]
		[-1, 2]
		[3, 1]
		[3, 2]
		[1, 3]
	]

	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 18
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			AvailableChoices = [-1, 0, 1, 2]
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		FireAlternatingToggle
		{
			Type = UIToggle
			ToggleID = "fire_alternating"
			Default = 0
			AvailableChoices = [0,1]
		}

		CommonReloadTimer
		{
			Type = Timer
			Duration = 1
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}

		CommonOnShootEffectTimer
		{
			Type = Timer
			Duration = 0.21
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}

		CommonReloadResetTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = CommonReloadResetTrigger
		}

		SwitchWeaponCooldownProgressBar
		{
			Type = ProgressBar
			OperationalToggle = SwitchWeaponCooldownTimer
			InvertOperationalToggle = true
			ShowProgressFor = SwitchWeaponCooldownTimer
			Invert = true
			LowColor = [16, 16, 16]
			HighColor = [255, 255, 255]
		}
		SwitchWeaponCooldownTimer
		{
			Type = Timer
			Duration = 8
			AutoStart = true
			Repeats = false
			StartsOn = 0
			StartTrigger = SwitchWeaponCooldownTrigger
		}
		SwitchWeaponCooldownTrigger
		{
			Type = ModeTrigger
			Mode = MunitionType
			TriggerInModes = [0,1,2]
		}

		MunitionType
		{
			Type = UIToggle
			ToggleID = "SW.munition_type"
			Default = -1
			AvailableChoices = [0, 1, 2]
			AlwaysAllowInBuildMode = true
		}

		RedMunitionToggle
		{
			Type = ModeToggle
			Mode = MunitionType
			OnMode = 0
		}
		BlueMunitionToggle
		{
			Type = ModeToggle
			Mode = MunitionType
			OnMode = 1
		}
		GreenMunitionToggle
		{
			Type = ModeToggle
			Mode = MunitionType
			OnMode = 2
		}

		ShootLeftTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = ShootLeftTrigger
		}

		ShootMidTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = ShootMidTrigger
		}

		ShootRightTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = ShootRightTrigger
		}

		RedMunitionComponents
		{
			Type = ToggledComponents
			Toggle = RedMunitionToggle
			IncludeInBlueprints = true
			Components = &<small_triple_turbolaser_red.rules>/Components
		}

		BlueMunitionComponents
		{
			Type = ToggledComponents
			Toggle = BlueMunitionToggle
			IncludeInBlueprints = true
			Components = &<small_triple_turbolaser_blue.rules>/Components
		}

		GreenMunitionComponents
		{
			Type = ToggledComponents
			Toggle = GreenMunitionToggle
			IncludeInBlueprints = true
			Components = &<small_triple_turbolaser_green.rules>/Components
		}

		ExteriorType
		{
			Type = UIToggle
			ToggleID = "SW.exterior_type"
			Default = -1
			AvailableChoices = [0, 1]
			AlwaysAllowInBuildMode = true
		}
		
		WhiteExteriorToggle
		{
			Type = ModeToggle
			Mode = ExteriorType
			OnMode = 0
		}

		GreyExteriorToggle
		{
			Type = ModeToggle
			Mode = ExteriorType
			OnMode = 1
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 8000
		}

		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 640
			OperationalToggle = PowerToggle
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		BatteryStorageBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = BatteryStorage
			LowColor = [64, 64, 0]
			HighColor = [250, 250, 0]
			FullColor = [255, 255, 0]
		}

		Graphics
		{
			Type = Graphics
			OperationalToggle = IsOperational
			Location = [1.5, 1.5]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [3, 3]
					}
					{
						File = "floor_33.png"
						Size = [3, 3]
					}
					{
						File = "floor_66.png"
						Size = [3, 3]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [3, 3]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"console on1.png"
							"console on2.png"
							"console on3.png"
						]
						Size = [3, 3]
						AnimationInterval = 0.50
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "console off.png"
						Size = [3, 3]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [3, 3]
					}
					{
						File = "walls_33.png"
						Size = [3, 3]
					}
					{
						File = "walls_66.png"
						Size = [3, 3]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [3, 3]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [3, 3]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [3, 3]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [2, 2]
						Z = 1.30 // Controls the "height" of the light for the purposes of normal mapping.
						VertexColor = [192, 192, 192] // [6, 57, 113]
					}
				]
			}
		}

		CrewLocation1
		{
			Type = CrewLocation
			Location = [0.81, 0.92]
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [2.19, 0.92]
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 2
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				[1.05, 1.1]
				[1.95, 1.1]
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
			]
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [1.5, 1.5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [3, 3]
				}
				{
					File = "batteries2.png"
					Size = [3, 3]
				}
				{
					File = "batteries3.png"
					Size = [3, 3]
				}
				{
					File = "batteries4.png"
					Size = [3, 3]
				}
				{
					File = "batteries5.png"
					Size = [3, 3]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational,
			Location = [1.5, 1.5]
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1.5, 1.5]

			FactorHitEffectsWith = BatteryStorage
			HitEffects
			[
				{
					Type = AreaDamage
					Damage = 400
					Radius = 2
					Delay = .05
					Filter
					{
						Friendlies = true
						OperationalHealth = true
						StructuralHealth = false
					}
				}
				{
					Type = AreaDamage
					Damage = 200
					Radius = 2
					Delay = .05
					Filter
					{
						Friendlies = true
						OperationalHealth = false
						StructuralHealth = true
					}
				}{
					Type = AreaFires
					FireChancePerTile = .1
					Radius = 4
					Falloff = 0
					Delay = .05
					Filter
                    {
                        Friendlies = true
                    }
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1.5, 1.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1.5, 1.5]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1.5, 1.5]
					}
				}
				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1.5, 1.5]
					}
				}
			]
		}
		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [3, 3]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = (&~/TurretStats/Stats/PowerPerSecond) * 1
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}
	StatsByCategory
	[
		&~/TurretStats
		&<small_triple_turbolaser_red.rules>/LaserStats
		&<small_triple_turbolaser_blue.rules>/LaserStats
		&<small_triple_turbolaser_green.rules>/LaserStats
	]

}
TurretStats
{
	NameKey = "StatCategories/Turret"
	Stats
	{
		Barrels = 3
		ROF = (&Barrels) / (&~/Part/Components/CommonReloadTimer/Duration)
		Range = &~/BulletEmitterBase/Bullet/Range
		Arc = deg(&~/TurretBase/FiringArc)
		TurretSpeed = deg(&~/TurretBase/RotateSpeed)
		PowerPerShot = (&~/BulletEmitterBase/ResourcesUsed) / 1000
		PowerPerSecond = (&PowerPerShot) * (&ROF)
		ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
	}
}
OperationalRoofLightingBase
{
	Size = [2.7, 3.3] //X+0,6(Distance between Barrels)=Y
	Z = 1.65 // Controls the "height" of the light for the purposes of normal mapping.
}
BulletEmitterBase
{
	Type = BulletEmitter
	ChainedTo = Turret
	FireTrigger = Turret
	GetTargetFrom = Turret
	//No Location is Triple barrel
	OperationalToggle = IsOperational
	FireDelay = 0.15
	ResourceStorage = BatteryStorage
	ResourcesUsed = 140
	Bullet = &/COMMON_SHOTS/redtriplelasershot
	//Recoil = 10
}
TurretBase
		{
			Type = TurretWeapon
			Location = [1.5, 1.5]
			Rotation = -90d// Relative to unrotated part.
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = 0 // Uses separate fire timer.
			FirePermissionToggle = FirePermissionToggle
			FiringArc = 130d
			RotateSpeed = 90d
			FireThresholdAngle = 4d
			//CanBeGivenExplicitTarget = true
			//TargetSearchesPerSecond = 1
			HoldTargetAfterCancel = 0.15
			AutoTargetCrewSafetyDist = 8
			AIFirepowerRating = 1600
			Emitter = BulletEmitterMid
			IgnoreSourceShipLowLOSChecks = true //NEW FOR ROOF
			//IgnoreSourceShipLOSChecks = true //OLD
			//AllowFireWithBlockedLOS = true

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}
