Part : /BASE_PART
{	
	ID = SW.small_laser_cannon_switchable
	OtherIDs = ["SW.small_laser_cannon","small_laser_cannon","SW.small_laser_cannonblue","small_laser_cannonblue","SW.small_laser_cannongreen","small_laser_cannongreen"]
	NameKey = "Parts/SmallLaserCannonSwitchable"
	IconNameKey = "Parts/SmallLaserCannonSwitchableIcon"
	EditorGroup = "WeaponsEnergy"
	DescriptionKey = "Parts/SmallLaserCannonSwitchableDesc"
	Resources
	[
		[steel, 8] //
	]  //Cost = 3000
	AIValueFactor = 1

	TypeCategories = [weapon, uses_power, uses_laser_parts, is_crewed]
	Size = [1, 1]
	SelectionPriority = 1
	SelectionTypeByRotation = true
	SelectionTypeID = "cannons"
	MaxHealth = 2000
	InitialPenetrationResistance = 2
	PenetrationRectType = Normal
	EditorIcon
	{
		Texture
		{
			File = "turret.png"
			SampleMode = Linear
		}
		Size = [32, 64]
	}
	
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}
		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}

		MunitionType
		{
			Type = UIToggle
			ToggleID = "SW.munition_type"
			Default = 0
			AlwaysAllowInBuildMode = true
		}
		RedMunitionToggle
		{
			Type = ModeToggle
			Mode = MunitionType
			OnMode = 0
		}
		RedMunitionComponents
		{
			Type = ToggledComponents
			Toggle = RedMunitionToggle
			IncludeInBlueprints = true
			Components = &<small_laser_cannon_red.txt>/Components
		}
		BlueMunitionToggle
		{
			Type = ModeToggle
			Mode = MunitionType
			OnMode = 1
		}
		BlueMunitionComponents
		{
			Type = ToggledComponents
			Toggle = BlueMunitionToggle
			IncludeInBlueprints = true
			Components = &<small_laser_cannon_blue.txt>/Components
		}
		GreenMunitionToggle
		{
			Type = ModeToggle
			Mode = MunitionType
			OnMode = 2
		}
		GreenMunitionComponents
		{
			Type = ToggledComponents
			Toggle = GreenMunitionToggle
			IncludeInBlueprints = true
			Components = &<small_laser_cannon_green.txt>/Components
		}

		Graphics
		{
			Type = Graphics
			OperationalToggle = IsOperational,
			Location = [0.5, 0.5]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 1]
					}
					{
						File = "floor_33.png"
						Size = [1, 1]
					}
					{
						File = "floor_66.png"
						Size = [1, 1]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [1, 1]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads on1.png"
							"doodads on2.png"
							"doodads on3.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.50
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "doodads off.png"
						Size = [1, 1]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 1]
					}
					{
						File = "walls_33.png"
						Size = [1, 1]
					}
					{
						File = "walls_66.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [1, 1]
					}
					{
						File = "roof_33.png"
						Size = [1, 1]
					}
					{
						File = "roof_66.png"
						Size = [1, 1]
					}
				]
			}
			OperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "roof_windows_on.png"
						Size = [1, 1]
					}
					{
						File = "roof_windows_on_33.png"
						Size = [1, 1]
					}
					{
						File = "roof_windows_on_66.png"
						Size = [1, 1]
					}
				]
			}
		}
		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 3000
		}

		BatteryConsumer
		{
			Type = TypedResourceGridConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 1000
			OperationalToggle = PowerToggle
			ReceiveAmmoMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		CrewLocation1
		{
			Type = CrewLocation
			Location = [.5, 0.7234375]
			Rotation = 180d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				[.5, 0.7234375]
			]
			CrewLocations
			[
				CrewLocation1
			]
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [0.5, 0.5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			AmmoLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					Size = [1, 1]
				}
				{
					File = "batteries3.png"
					Size = [1, 1]
				}
				{
					File = "batteries4.png"
					Size = [1, 1]
				}
				{
					File = "batteries5.png"
					Size = [1, 1]
				}
			    {
					File = "batteries6.png"
					Size = [1, 1]
				}
			    {
					File = "batteries7.png"
					Size = [1, 1]
				}
			    {
					File = "batteries8.png"
					Size = [1, 1]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [0.5, 0.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [0.5, 0.5]
			
			FactorHitEffectsWith = BatteryStorage
			HitEffects
			[
				{
					Type = AreaDamage
					Damage = 400
					Radius = 2
					Delay = .05
					Filter
					{
						Friendlies = true
						OperationalHealth = true
						StructuralHealth = false
					}
				}
				{
					Type = AreaDamage
					Damage = 200
					Radius = 2
					Delay = .05
					Filter
					{
						Friendlies = true
						OperationalHealth = false
						StructuralHealth = true
					}
				}
				{
					Type = AreaFires
					FireChancePerTile = .1
					Radius = 4
					Falloff = 0
					Delay = .05
					Filter
                    {
                        Friendlies = true
                    }
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [0.5, 0.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}
		BlueprintsRed
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 1]

			ShowOnlyInToggleMode
			{
				ToggleID = SW.munition_type
				Mode = 0
			}
		}
		BlueprintsBlue
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 1]
			ShowOnlyInToggleMode
			{
				ToggleID = SW.munition_type
				Mode = 1
			}
		}
		BlueprintsGreen
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 1]
			ShowOnlyInToggleMode
			{
				ToggleID = SW.munition_type
				Mode = 2
			}
		}
		/*
		BlueprintsWhite
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 1]
			ShowOnlyInToggleMode
			{
				ToggleID = SW.exterior_type
				Mode = 0
			}
		}
		BlueprintsGrey
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 1]
			ShowOnlyInToggleMode
			{
				ToggleID = SW.exterior_type
				Mode = 1
			}
		}
		*/
	}
	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = (&PowerPerSecond)
		RecCrew = (&CrewRequired) + (&RecPower) * 4

		ROF = 2 / (&<small_laser_cannon_red.txt>/Components/Turret/FireInterval)
		Range = &<small_laser_cannon_red.txt>/Components/BulletEmitterBase/Bullet/Range
		Arc = deg(&<small_laser_cannon_red.txt>/Components/Turret/FiringArc)
		TurretSpeed = deg(&<small_laser_cannon_red.txt>/Components/Turret/RotateSpeed)
		ShotSpeed = &<small_laser_cannon_red.txt>/Components/BulletEmitterBase/Bullet/Speed
		ShotHP = &<small_laser_cannon_red.txt>/Components/BulletEmitterBase/Bullet/Components/Targetable/Health
		PowerPerShot = (&<small_laser_cannon_red.txt>/Components/BulletEmitterBase/ResourcesUsed) / 1000
		PowerPerSecond = (&PowerPerShot) * (&ROF)
		ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
	}
	StatsByCategory
	[
		&<small_laser_cannon_red.txt>/LaserStats
		&<small_laser_cannon_blue.txt>/LaserStats
		&<small_laser_cannon_green.txt>/LaserStats
	]
}
