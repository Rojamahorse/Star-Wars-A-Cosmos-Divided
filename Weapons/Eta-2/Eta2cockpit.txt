Part : /BASE_PART
{
	NameKey = "Parts/Eta2"
	IconNameKey = "Parts/Eta2Icon"
	ID = SW.eta2cockpit
	OtherIDs = ["etacockpit"]
	EditorGroup = "Flight"
	DescriptionKey = "Parts/Eta2Desc"
	Cost = 10000
	AIValueFactor = 5
	AIValue = (&Cost) * 5
	Size = [1, 2]
	SelectionPriority = 0
	MaxHealth = 6200
	InitialPenetrationResistance = 2
	PenetrationRectType = Normal
	ProhibitAbove = 3
	IsContiguityOrigin = true
	IsShipForward = true
	TypeCategories = [command, weapon, uses_power,uses_laser_parts, is_crewed]
//doors only in the back
	AllowedDoorLocations
	[
		[1,1]
		[-1,1]
		[0,2]
	]
//comes with one crew member
	CrewCapacity = 1
	CrewSpawnLocations
	[
		[.5, 1.5]
	]
	
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [32, 256]
	}
	Components
	{
		BlueprintSprite0
		{
			File = "blueprints.png"
			Size = [1, 5]
			Offset = [0, -1.5]
			Type=BlueprintSprite;
		}

		CommandProvider
		{
			Type = CommandProvider
			OperationalToggle = IsOperational
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}
		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}

		Sensor
		{
			Type = Sensor
			//lower radius
			SightRadius = 300
		}

		BatteryStorage
		{
			Type = AmmoStorage
			AmmoType = battery
			MaxAmmo = 3500
		}
		BatteryConsumer
		{
			Type = AmmoConsumer
			AmmoType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/ControlRoom_Supply
			ResupplyThreshold = 1500
			OperationalToggle = PowerToggle
			ReceiveAmmoMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		PowerDrain
		{
			Type = AmmoConverter
			FromStorage = BatteryStorage
			FromQuantity = 1500
//uses less power
			Interval = 80// Drains 1.5 power every minute.
		}

		CrewLocation
		{
			Type = CrewLocation
			Location = [.5, 1.30]
			Rotation = 180d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/ControlRoom_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			AbandonWhenOnFire = false
			CrewDestinations
			[
				[.5, 1.50]
			]
			CrewLocations
			[
				CrewLocation
			]
		}
		Turret
		{
			Type = TurretWeapon
			Location = [0.5, 0.5]
			Rotation = -90d
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = .30
			FiringArc = 1d
			FireDelay = .04
			RotateSpeed = 90d
			FireThresholdAngle = 1d
			TargetSearchTriesPerFrame = 1
			AIFirepowerRating = 500
			FirePermissionToggle = FireModeToggle
			Emitter = BulletEmitterBase

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		BulletEmitterBase
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger 
			GetTargetFrom = Turret
			Location = [0.5, 0]
			OperationalToggle = IsOperational
			Bullet = &/COMMON_SHOTS/blueeta2lasershot
			AmmoStorage = BatteryStorage
			AmmoUsed = 40
		}

		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = Turret
		}

		BulletEmitterLeft : BulletEmitterBase
		{
			Type = BulletEmitter
			FireTrigger = Turret
			Location = [3.2, 0.245]
		}

		BulletEmitterRight : BulletEmitterBase
		{
			Type = BulletEmitter
			FireTrigger = Turret
			Location = [3.2, -0.245]
		}

		ChargeEffectBase
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitterBase
			Trigger = Turret
			AnchorMediaEffects = true

			MediaEffects
			[
				&/COMMON_SOUNDS/SmallLaserCharge
			]
		}

		FireEffectBase
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitterBase
			Trigger = Turret
			Location = [3, 0]
			AnchorMediaEffects = true

			MediaEffects
			[
				&/COMMON_SOUNDS/Eta2SFX
			]
		}

		FireEffectLeft
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitterLeft
			Trigger = BulletEmitterLeft
			AnchorMediaEffects = true
	
			MediaEffects
			[
				&/COMMON_PARTICLES/BlueLaserShoot
			]
		}

		FireEffectRight : FireEffectLeft
		{
			ChainedTo = BulletEmitterRight
			Trigger = BulletEmitterRight
		}

		TurretCollider
		{
			Type = CircleCollider
			ChainedTo = Turret
			Radius = .1
			Density = .75
		}
		
		WeaponSprite
		{
			Type = Sprite
			ChainedTo = Turret
			Location = [2, 0]
			Rotation = 90d
			Layer = "weapons"
			ResetAnimationTrigger = Turret
			AtlasSprite
			{
				AnimationFiles
				[
					"barrel.png"
				]
				Size = [1, 3]
				AnimationInterval = 0.01
				AnimationStartTime = MinValue
				ClampAnimation = true
			}
		}
		Graphics
		{
			Type = Graphics
			OperationalToggle = IsOperational,
			Location = [.5,1]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 2]
					}
					{
						File = "floor_33.png"
						Size = [1, 2]
					}
					{
						File = "floor_66.png"
						Size = [1, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"on.png"
                        	"on10.png"
]
						Size = [1, 2]
						AnimationInterval = 0.100
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "off.png"
						Size = [1, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 2]
					}
				    {
						File = "walls_33.png"
						Size = [1, 2]
					}
				    {
						File = "walls_66.png"
						Size = [1, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [1, 2]
					}
					{
						File = "roof.png"
						Size = [1, 2]
					}
					{
						File = "roof.png"
						Size = [1, 2]
					}
				]
			}
			OperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "Windows.png"
						Size = [1, 2]
					}
				    {
						File = "Windows.png"
						Size = [1, 2]
					}
				    {
						File = "Windows.png"
						Size = [1, 2]
					}
				]
			}
			NonOperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "Windows.png"
						Size = [1, 2]
					}
				]
			}
		}
		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}
				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [.75, .75]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [.75, .75]
					}
				}
			]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerUsageContinuous = (&~/Part/Components/PowerDrain/FromQuantity) / (&~/Part/Components/PowerDrain/Interval) / 1000
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxAmmo) / 1000
		SensorRange = &~/Part/Components/Sensor/SightRadius

		RecPower = &PowerUsageContinuous
		RecCrew = (&CrewRequired) + (&RecPower) * 4

		Barrels = 2
		ROF = (&~/Part/Stats/Barrels) / (&~/Part/Components/Turret/FireInterval)
		Range = &~/Part/Components/BulletEmitterBase/Bullet/Range
		Arc = deg(&~/Part/Components/Turret/FiringArc)
		TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
		ShotSpeed = &~/Part/Components/BulletEmitterBase/Bullet/Speed
		ShotHP = &~/Part/Components/BulletEmitterBase/Bullet/Components/Targetable/Health
		PowerPerShot = (&~/Part/Components/BulletEmitterBase/AmmoUsed) / 1000
		PowerPerSecond = (&PowerPerShot) * (&~/Part/Stats/ROF)
		ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
	}
LaserStats
{
	NameKey = "StatCategories/SingleRedLasershot"
	Stats
	{
		ShieldDamagePerShot = &~/Components/BulletEmitterBase/Bullet/Components/Hit/HitShield/HitEffects/0/Damage
		ShieldDamagePerSecond = (&ShieldDamagePerShot) * 1 / (&~/Components/Turret/FireInterval)
		ShieldDamage = [&../ShieldDamagePerShot, &../ShieldDamagePerSecond]
		DamagePerShot = &~/Components/BulletEmitterBase/Bullet/Components/Hit/HitOperational/HitEffects/0/Damage
		DamagePerSecond = (&DamagePerShot) * 1 / (&~/Components/Turret/FireInterval)
		Damage = [&../DamagePerShot, &../DamagePerSecond]
	}
}
}
