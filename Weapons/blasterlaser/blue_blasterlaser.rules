Components
	{
		CommonReloadResetTriggerProxyProxy
		{
			Type = TriggerProxy
			ComponentID = CommonReloadResetTriggerProxy
		}

		FirePermissionToggle
		{
			Type = MultiToggle
			Toggles = [CommonReloadTimer, SwitchWeaponCooldownTimer, FireModeToggle]
			Mode = All
		}

		Turret : &<small_blasterlaser.rules>/TurretBase
		{
			
		}
		
		WeaponSprite : &<small_blasterlaser.rules>/WeaponSpriteBase
		{

		}

		TurretCollider : &<small_blasterlaser.rules>/TurretColliderBase
		{

		}

		ReloadProgressBar : &<small_blasterlaser.rules>/ReloadProgressBarBase
		{
			LowColor = [0, 0, 64]
			HighColor = [0, 0, 255]
		}

		CommonReloadResetTrigger
		{
			Type = MultiTrigger
			Triggers = [Turret]
		}

		BulletEmitter : &<small_blasterlaser.rules>/BulletEmitterBase
		{
			Bullet = &/COMMON_SHOTS/bluesmalllasershot
		}

		ChargeEffect : &<small_blasterlaser.rules>/ChargeEffectBase
		{
			
		}

		FireEffect : &<small_blasterlaser.rules>/FireEffectBase
		{
			MediaEffects
			[
				&/COMMON_PARTICLES/SmallBlueLaserShoot
				
				&/COMMON_SOUNDS/SmallLaserFire
			]
		}

		GraphicsTurret
		{
			Type = Graphics
			OperationalToggle = CommonOnShootEffectTimer
			InvertOperationalToggle = true
			ChainedTo = Turret
			Location = [1.4, 0]

			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = &<small_blasterlaser.rules>/OperationalRoofLightingBase/Size
						Z = &<small_blasterlaser.rules>/OperationalRoofLightingBase/Z
						VertexColor = [16, 16, 255]
					}
				]
			}
		}
	}
LaserStats
{
	NameKey = "StatCategories/SingleBlueLasershot"
	Stats
	{
		ShieldDamagePerShot = &~/Components/BulletEmitter/Bullet/Components/Hit/HitShield/HitEffects/0/Damage
		ShieldDamagePerSecond = (&ShieldDamagePerShot) * (&<small_blasterlaser.rules>/TurretStats/Stats/ROF)
		ShieldDamage = [&../ShieldDamagePerShot, &../ShieldDamagePerSecond]
		DamagePerShot = &~/Components/BulletEmitter/Bullet/Components/Hit/HitOperational/HitEffects/0/Damage
		DamagePerSecond = (&DamagePerShot) * (&<small_blasterlaser.rules>/TurretStats/Stats/ROF)
		Damage = [&../DamagePerShot, &../DamagePerSecond]
		ShotSpeed = &~/Components/BulletEmitter/Bullet/Speed
		//ShotHP = &~/Components/BulletEmitterLeft/Bullet/Components/Targetable/Health
	}
}
