Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{	
	ID = SW.blasterlaser_switchable
	OtherIDs = ["small_laser_defense1","Blue_blaster_laser","Blue_blaster_laser1"]
	NameKey = "Parts/Smallpointlaser"
	IconNameKey = "Parts/Smallpointlaser"
	EditorGroup = "WeaponsEnergy"
	DescriptionKey = "Parts/SmallpointlaserDesc"
	Resources
	[
		[steel, 8] //
	]  //Cost = 800
	AIValueFactor = 1

	TypeCategories = [weapon, uses_power, uses_laser_parts, is_crewed]
	Size = [1, 2]
	PhysicalRect = [0, 1, 1, 1]
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 2000
	InitialPenetrationResistance = 1
	PenetrationRectType = Normal
	ProhibitAbove = 1
	MaxDoors = 1
	AllowedDoorLocations
	[
		[-1, 1]
		[1, 1]
		[0, 2]
	]
	EditorIcon
	{
		Texture
		{
			File = "blaster/icon.png"
			SampleMode = Linear
		}
		Size = [21.33, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 2
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			AvailableChoices = [-1, 0, 1, 2]
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [2]
		}

		CommonReloadTimer
		{
			Type = Timer
			Duration = 0.25
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}

		CommonOnShootEffectTimer
		{
			Type = Timer
			Duration = 0.25
			AutoStart = true
			StartsOn = 0
			StartTrigger = CommonReloadResetTriggerProxy
		}

		CommonReloadResetTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = CommonReloadResetTrigger
		}

		SwitchWeaponCooldownProgressBar
		{
			Type = ProgressBar
			OperationalToggle = SwitchWeaponCooldownTimer
			InvertOperationalToggle = true
			ShowProgressFor = SwitchWeaponCooldownTimer
			Invert = true
			LowColor = [255, 0, 0]
			HighColor = [0, 255, 0]
		}
		SwitchWeaponCooldownTimer
		{
			Type = Timer
			Duration = 2
			AutoStart = true
			Repeats = false
			StartsOn = 0
			StartTrigger = SwitchWeaponCooldownTrigger
		}
		SwitchWeaponCooldownTrigger
		{
			Type = ModeTrigger
			Mode = MunitionType
			TriggerInModes = [0,1,2]
		}

		MunitionType
		{
			Type = UIToggle
			ToggleID = "SW.munition_type"
			Default = -1
			ToggledOnChoices = [0, 1, 2]
			AlwaysAllowInBuildMode = true
		}

		RedMunitionToggle
		{
			Type = ModeToggle
			Mode = MunitionType
			OnMode = 0
		}
		RedMunitionComponents
		{
			Type = ToggledComponents
			Toggle = RedMunitionToggle
			IncludeInBlueprints = false
			Components = &<red_blasterlaser.rules>/Components
		}

		BlueMunitionToggle
		{
			Type = ModeToggle
			Mode = MunitionType
			OnMode = 1
		}
		BlueMunitionComponents
		{
			Type = ToggledComponents
			Toggle = BlueMunitionToggle
			IncludeInBlueprints = false
			Components = &<blue_blasterlaser.rules>/Components
		}

		GreenMunitionToggle
		{
			Type = ModeToggle
			Mode = MunitionType
			OnMode = 2
		}
		GreenMunitionComponents
		{
			Type = ToggledComponents
			Toggle = GreenMunitionToggle
			IncludeInBlueprints = false
			Components = &<green_blasterlaser.rules>/Components
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery 
			MaxResources = 2000 //for 40 times firing in 10 secs(40shots)
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 800
			OperationalToggle = PowerToggle
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryStorageBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = BatteryStorage
			LowColor = [64, 64, 0]
			HighColor = [250, 250, 0]
			FullColor = [255, 255, 0]
		}

		Graphics
		{
			Type = Graphics
			Location = [.5, 2]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				Offset = [0, -0.5]
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 1]
					}
					{
						File = "floor_33.png"
						Size = [1, 1]
					}
					{
						File = "floor_66.png"
						Size = [1, 1]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads on1.png"
							"doodads on2.png"
							"doodads on3.png"
							"doodads on4.png"
							"doodads on5.png"
							"doodads on6.png"
							"doodads on7.png"
							"doodads on8.png"
						]
						Size = [1, 1]
						Offset = [0, -0.5]
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "doodads off.png"
						Size = [1, 1]
						Offset = [0, -0.5]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				Offset = [0, -0.5]
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [1, 1]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				Offset = [0, -0.5]
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 1]
					}
					{
						File = "walls_33.png"
						Size = [1, 1]
					}
					{
						File = "walls_66.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				Offset = [0, -0.5]
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [1, 1]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [1, 1]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [1, 1]
					}
				]
			}
		}

		TurretGraphics
		{
			Type = Graphics
			Location = [.5, 1]
			OperationalToggle = IsOperational
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						// None.
					}
					{
						File = "turret damage_33.png"
						Size = [1, 2]
					}
					{
						File = "turret damage_66.png"
						Size = [1, 2]
					}
				]
			}
		}

		CrewLocation
		{
			Type = CrewLocation
			Location = [.5, 1.75]
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				&../../CrewLocation/Location
			]
			CrewLocations
			[
				CrewLocation
			]
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [.5, 1.5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			HasZeroResourceSprite = false
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					Size = [1, 1]
				}
				{
					File = "batteries3.png"
					Size = [1, 1]
				}
				{
					File = "batteries4.png"
					Size = [1, 1]
				}
				{
					File = "batteries5.png"
					Size = [1, 1]
				}
				{
					File = "batteries6.png"
					Size = [1, 1]
				}
				{
					File = "batteries7.png"
					Size = [1, 1]
				}
				{
					File = "batteries8.png"
					Size = [1, 1]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [.5, 1.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [.5, 1.5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, 1.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}
		Blueprints
		{
			Type = BlueprintSprite
			File = "blaster/blueprints.png"
			Size = [1, 3]
			Offset = [0, -0.5]
		}
	}
	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = (&~/TurretStats/Stats/PowerPerSecond) * 1
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}
	StatsByCategory
	[
		&~/TurretStats
		&<red_blasterlaser.rules>/LaserStats
		&<blue_blasterlaser.rules>/LaserStats
		&<green_blasterlaser.rules>/LaserStats
	]	
}
TurretStats
{
	NameKey = "StatCategories/Turret"
	Stats
	{
		Barrels = 1
		ROF = (&Barrels) / (&~/Part/Components/CommonReloadTimer/Duration)
		Range = &~/BulletEmitterBase/Bullet/Range
		Arc = deg(&~/TurretBase/FiringArc)
		TurretSpeed = deg(&~/TurretBase/RotateSpeed)
		PowerPerShot = (&~/BulletEmitterBase/ResourcesUsed) / 1000
		PowerPerSecond = (&PowerPerShot) * (&ROF)
		ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
	}
}
OperationalRoofLightingBase
{
	Size = [1.2, 1.2] //X(Desired Radius)+barrelspacing(Distance between Barrels)+X(Desired Radius)=Y 
	Z = 1.32 // Controls the "height" of the light for the purposes of normal mapping.
}
BulletEmitterBase
{
	Type = BulletEmitter
	OperationalToggle = IsOperational
	ChainedTo = Turret
	FireTrigger = Turret
	GetTargetFrom = Turret
	Location = [1, 0]
	FireDelay = 0.03
	ResourceStorage = BatteryStorage
	ResourcesUsed = 50
	Bullet = &/COMMON_SHOTS/redsmalllasershot
}
ReloadProgressBarBase
{
	Type = ProgressBar
	OperationalToggle = IsOperational
	ShowProgressFor = CommonReloadTimer
	Invert = true
}
FireEffectBase
{
	Type = TriggeredEffects
	ChainedTo = BulletEmitter
	Trigger = BulletEmitter
	Location = [0.4, 0]
	AnchorMediaEffects = true
}
ChargeEffectBase
{
	Type = TriggeredEffects
	ChainedTo = Turret
	Trigger = Turret
	Location = [1.1, 0]
	AnchorMediaEffects = true

	MediaEffects
	[
		&/COMMON_SOUNDS/SmallLaserCharge
	]
}
TurretColliderBase
{
	Type = CircleCollider
	ChainedTo = Turret
	Radius = 0.5 //1.0
	Density = 1.5
}
TurretBase
		{
			Type = TurretWeapon
			Location = [0.5, 0.66]
			Rotation = -90d// Relative to unrotated part.
			Emitter = BulletEmitter
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = 0
			FiringArc = 200d;
			RotateSpeed = 65d;
			FireThresholdAngle = 3d;
			AIFirepowerRating = 400
			CanBeGivenExplicitTarget = true
			TargetSearchesPerSecond = 4
			FirePermissionToggle = FirePermissionToggle
			HoldTargetAfterCancel = 0.15
			AutoTargetCrewSafetyDist = 8
			IgnoreSourceShipLOSChecks = false
			AllowFireWithBlockedLOS = false

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
					Overridable = true
				}
				{
				    TargetType = Crew
				    Toggle = AutoTargetToggle
					Overridable = true
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}
WeaponSpriteBase
		{
			Type = Sprite
			ChainedTo = Turret
			Location = [.5, 0]
			Rotation = 90d
			Layer = "weapons"
			ResetAnimationTrigger = CommonReloadResetTriggerProxyProxy
			AtlasSprite
			{
				AnimationFiles
				[
					"blaster/weapon2.png"
					"blaster/weapon3.png"
					"blaster/weapon4.png"
					"blaster/weapon5.png"
					"blaster/weapon6.png"
					"blaster/weapon7.png"
					"blaster/weapon8.png"
					"blaster/weapon1.png"// Loop back to beginning and clamp there.
				]
				NormalsAnimationFiles
				[
					"blaster/weapon2_normals.png"
					"blaster/weapon3_normals.png"
					"blaster/weapon4_normals.png"
					"blaster/weapon5_normals.png"
					"blaster/weapon6_normals.png"
					"blaster/weapon7_normals.png"
					"blaster/weapon8_normals.png"
					"blaster/weapon1_normals.png"
				]
				Size = [1, 2]
				AnimationInterval = 0.1
				AnimationStartTime = MinValue
				ClampAnimation = true
			}
		}
