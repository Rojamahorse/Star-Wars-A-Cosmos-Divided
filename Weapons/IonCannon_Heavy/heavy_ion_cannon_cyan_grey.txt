Components
	{
		SwitchTimerTrigger
		{
			Type = Timer
			Duration = 9
			AutoStart = true
			Repeats = false
		}
		SwitchTimerProgressBar
		{
			Type = ProgressBar
			ShowProgressFor = SwitchTimerTrigger
			Invert = true
			OperationalToggle = SwitchCooldownToggle
			InvertOperationalToggle = true
		}
		SwitchCooldownToggle
		{
			Type = TriggeredToggle
			OnTrigger = SwitchTimerTrigger
			StartsOn = false
		}
		WeaponIsOperational
		{
			Type = MultiToggle
			Toggles = [IsOperational, SwitchCooldownToggle]
			Mode = All
		}

		Turret
		{
			Type = TurretWeapon
			Location = [2, 2]
			Rotation = -90d// Relative to unrotated part.
			OperationalToggle = WeaponIsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = 2
			FiringArc = 180d
			RotateSpeed = 90d
			FireThresholdAngle = 1d
			TargetSearchTriesPerFrame = 1
			AIFirepowerRating = 3200
			FirePermissionToggle = FireModeToggle
			Emitter = BulletEmitterBase
			IgnoreSourceShipLOSChecks = true

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = WeaponIsOperational
			ShowProgressFor = Turret
		}

		BulletEmitterBase
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger
			GetTargetFrom = Turret
			Location = [0,0]
			OperationalToggle = IsOperational
			Bullet = &/COMMON_SHOTS/cyanheavyioncannonshot
			AmmoStorage = BatteryStorage
			AmmoUsed = 1000
		}

		BulletEmitterLeft : BulletEmitterBase
		{
			Type = BulletEmitter
			FireTrigger = Turret
			Location = [2.375, 0.21]
		}

		BulletEmitterRight : BulletEmitterBase
		{
			Type = BulletEmitter
			FireTrigger = Turret
			Location = [2.375, -0.21]
		}

		FireEffectBase
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitterBase
			Trigger = Turret
			AnchorMediaEffects = true

			MediaEffects
			[
				&/COMMON_SOUNDS/IonCannonShot
			]
		}

		FireEffectLeft
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitterLeft
			Trigger = BulletEmitterLeft
			AnchorMediaEffects = true
	
			MediaEffects
			[
				&/COMMON_PARTICLES/CyanShoot
			]
		}

		FireEffectRight : FireEffectLeft
		{
			ChainedTo = BulletEmitterRight
			Trigger = BulletEmitterRight
		}

		TurretCollider
		{
			Type = CircleCollider
			ChainedTo = Turret
			Radius = 1.64
			Density = 1.5
		}

		BarrelSprite
		{
			Type = Sprite
			ChainedTo = Turret
			Location = [0.40, 0]
			Rotation = 90d
			Layer = "roof_doodads"
			ResetAnimationTrigger = BulletEmitterBase
			AtlasSprite
			{
				AnimationFiles
				[
					"Barrel2D.png"
					"Barrel1D.png"
				]
				Size = [4, 5]
				AnimationInterval = 0.0625
				AnimationStartTime = MinValue
				ClampAnimation = true
			}
		}
	}
LaserStats
{
			NameKey = "StatCategories/HeavyCyanIoncannonshot"
			Stats
			{
				ShieldDamagePerShot = &~/Part/Components/BulletEmitterBase/Bullet/Components/Hit/HitShield/HitEffects/0/Damage
				ShieldDamagePerSecond = (&ShieldDamagePerShot) * (&ROF)
				ShieldDamage = [&../ShieldDamagePerShot, &../ShieldDamagePerSecond]
				DamagePerShot = &~/Part/Components/BulletEmitterBase/Bullet/Components/Hit/HitOperational/HitEffects/0/Damage
				DamagePerSecond = (&DamagePerShot) * (&ROF)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
				ROF = 2 / (&~/Part/Components/Turret/FireInterval)
				Range = &~/Part/Components/BulletEmitterBase/Bullet/Range
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
				ShotSpeed = &~/Part/Components/BulletEmitterBase/Bullet/Speed
				ShotHP = &~/Part/Components/BulletEmitterBase/Bullet/Components/Targetable/Health
				PowerPerShot = (&~/Part/Components/BulletEmitterBase/AmmoUsed) / 1000
				PowerPerSecond = (&PowerPerShot) * (&ROF)
				ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
			}
		}
