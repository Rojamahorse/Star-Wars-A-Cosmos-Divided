/* ----------------------------------------------------------------------------

Introduction: SW:ACD Orbital Autocannon

Author : Lafiel

Description:
Quick and dirty fast prototyping version, 

based on Orbital Autocannon mounted on Mandator IV-class Siege Dreadnought

Versions:

 o 1.0 Cosmoteer 0.15.14


---------------------------------------------------------------------------- */

Part : /BASE_PART
{
	NameKey = "Parts/OrbitalAutocannon"
	IconNameKey = "Parts/OrbitalAutocannonIcon"
	ID = SW.orbital_autocannon
	DescriptionKey = "Parts/OrbitalAutocannonDesc"
	EditorGroup = "TechII"
	Cost = 10000000
	Size = [4, 8]
	Density = 2
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 32000
	TypeCategories = [weapon, uses_power, is_crewed,axial_weapon]
	ReceivableBuffs = [SWTurretPerimeter]

	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [46, 92]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, PartCrew,{Toggle=PerimeterToggle; Invert=true}]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
/*
		AmmoPrereq
		{
			Type = MultiAmmoStorage
			AmmoType = battery
			AmmoStorages = [BatteryStorage]
			//ToggleOnAmmo = 19001
			//ToggleOffAmmo = 3750
		}
*/
		BatteryStorage
		{
			Type = AmmoStorage
			AmmoType = battery
			MaxAmmo = 12000
			DelayBeforeReadyToUse = .5
			ToggleOnAmmo = 8000
			ToggleOffAmmo = 999
		}
		BatteryConsumer
		{
			Type = AmmoConsumer
			AmmoType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
			ReceiveAmmoMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

//-----------------------------------------------------------------------------

		//there shall be no other weapons in front
		AxialWeaponForwardPerimeterProvider
		{
			Type = AreaBuffProvider
			BuffType = SWTurretPerimeter
			BuffAmount = 10
			BuffArea = [0, -1000, 4, 1000]
			BuffsSelf = false
			Criteria
			{
				Category = axial_weapon
				//Rot = 0
				//Left = 0
				//Right = 6
				//Bottom = 0
			}
		}
/*
		AxialWeaponSidesPerimeterProvider
		{
			Type = GridBuffProvider
			BuffType = SWTurretPerimeter
			BuffAmount = 8
			GridDistance = 50
			BuffsSelf = false
			Criteria
			{
				Category = axial_weapon
				//Rot = 0
				//Left = 0
				//Right = 6
				//Bottom = 0
			}
		}
*/
		PerimeterToggle
		{
			Type = BuffToggle
			BuffType = SWTurretPerimeter
			MinBuffValue = 17
			//MaxBuffValue = 2
			//Invert = true
		}
		NotPerimeterToggle
		{
			Type = MultiToggle
			Toggles
			[
				PerimeterToggle
			]
			Mode = All
			Invert = true
		}

//-----------------------------------------------------------------------------

		Turret
		{
			Type = TurretWeapon
			Location = [2, 0] // Relative to upper-left corner of unrotated part.
			Rotation = -90d // Relative to unrotated part.
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = 2
			FiringArc = 160d
			RotateSpeed = 45d
			FireThresholdAngle = 1d
			IgnoreSourceShipLOSChecks = true
			HoldTargetAfterCancel = 0.5
			AIFirepowerRating = 6400
			FirePermissionToggle = FireModeToggle //FirePermissionToggle

			Emitter = WeaponEmitter

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = Turret
		}

		WeaponEmitter
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger = Turret
			GetTargetFrom = Turret
			Location = [0, 0]
			OperationalToggle = IsOperational
			Bullet = &/COMMON_SHOTS/redsiegeparticleshot
			FireDelay = 0
			Spread = [-0d, 0d]
			Burst = 2
			BurstDelay = 0.2
			AmmoStorage = BatteryStorage
			AmmoUsed = 2000
		}

//-----------------------------------------------------------------------------
		Graphics
		{
			Type = Graphics
			Location = [2, 4]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "../floor[4,8].png"
						Size = [4, 8]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "../empty_roof02[1,1].png"
						Size = [4, 8]
					}
				]
			}
		}
		CoreGraphics
		{
			Type = Graphics
			Location = [2, 4]
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "../kyber_crystal_red_on.png"
						Size = [2, 4]
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "../kyber_crystal_red_off.png"
						Size = [2, 4]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "../deathstar_superlaser/lights-r[3,4].png"
						Size = [4, 8]
					}
				]
			}
		}

//-----------------------------------------------------------------------------
		ConsoleGraphics
		{
			Type = Graphics
			OperationalToggle = IsOperational
			Location = [2, 3.5]
			OperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [-1.578125, 0]; // [.921875, 0];
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../../Superweapons/deathstar_superlaser/SW_console01_on1.png"
							"../../Superweapons/deathstar_superlaser/SW_console01_on2.png"
							"../../Superweapons/deathstar_superlaser/SW_console01_on3.png"
						]
						UVRotation = 1
						Size = [1, 2]
						AnimationInterval = 0.125
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [-1.578125, 0];
				DamageLevels
				[
					{
						File = "../../Superweapons/deathstar_superlaser/SW_console01_off.png"
						UVRotation = 1
						Size = [1, 2]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "doodads_low"
				Offset = [1.578125, 0]; // [5.078125, 0];
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../../Superweapons/deathstar_superlaser/SW_console01_on1.png"
							"../../Superweapons/deathstar_superlaser/SW_console01_on2.png"
							"../../Superweapons/deathstar_superlaser/SW_console01_on3.png"
						]
						UVRotation = 3
						Size = [1, 2]
						AnimationInterval = 0.125
					}
				]
			}
			NonOperationalRoofDoodad
			{
				Layer = "doodads_low"
				Offset = [1.578125, 0];
				DamageLevels
				[
					{
						File = "../../Superweapons/deathstar_superlaser/SW_console01_off.png"
						UVRotation = 3
						Size = [1, 2]
					}
				]
			}
		}
//-----------------------------------------------------------------------------
		CrewLocation1
		{
			Type = CrewLocation
			Location = [.421875, 3.15]  // [.921875, 3.5]
			Rotation = -90d
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [.421875, 3.85]
			Rotation = -90d
		}
		CrewLocation3
		{
			Type = CrewLocation
			Location = [3.578125, 3.15]  // [3.078125, 3.5]
			Rotation = 90d
		}
		CrewLocation4
		{
			Type = CrewLocation
			Location = [3.578125, 3.85]
			Rotation = 90d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 4
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				[.421875, 3.15]
				[.421875, 3.85]
				[3.578125, 3.15]
				[3.578125, 3.85]
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
				CrewLocation3
				CrewLocation4
			]
		}

//-----------------------------------------------------------------------------
		Indicators
		{
			Type = IndicatorSprites
			Location = [2, 4]
			Layer = "indicators"
			Indicators
			[
				// Turret Perimeter
				{
					Toggle = NotPerimeterToggle
					ShowInBuildMode = true
					AtlasSprite
					{
						File = &/INDICATORS/SWMinimumDistance
						Size = [2, 2]
					}
				}
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "../blueprints.png"
			Size = [4, 8]
		}
		BlueprintsCrystal
		{
			Type = BlueprintSprite
			File = "../blueprints_kyber_crystal.png"
			Size = [2, 4]
		}
		BlueprintsArrow
		{
			Type = BlueprintSprite
			File = "../blueprints_arrow_head_blue_large.png"
			Size = [1, 1]
			Offset = [0, -3.5]
		}
	}

/*
	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxAmmo) / 1000

		RecPower = &../StatsByCategory/0/Stats/PowerPerSecond
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/MedGreenLasershot"
			Stats
			{
				DamagePerShot = &~/Part/Components/WeaponEmitter/Bullet/Components/Hit/HitOperational/HitEffects/0/Damage/BaseValue
				DamagePerSecond = (&DamagePerShot) * (&ROF)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
				Penetration = &~/Part/Components/WeaponEmitter/Bullet/Components/Hit/Penetration
				FireChance = (&~/Part/Components/WeaponEmitter/Bullet/Components/Hit/PenetratingOperational/HitEffects/1/FireChance) * 100
				ROF = 1 / (&~/Part/Components/Turret/FireInterval)
				Range = &~/Part/Components/WeaponEmitter/Bullet/Range/BaseValue
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				//Spread = deg(&~/Part/Components/WeaponEmitter/Spread/1)
				TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
				ShotSpeed = &~/Part/Components/WeaponEmitter/Bullet/Speed
//				ShotHP = &~/Part/Components/WeaponEmitter/Bullet/Components/Targetable/Health
				PowerPerShot = (&~/Part/Components/WeaponEmitter/AmmoUsed) / 1000
				PowerPerSecond = (&PowerPerShot) * (&ROF)
				ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
			}
		}
	]

*/

}
